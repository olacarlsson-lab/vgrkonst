<!DOCTYPE html>
<html lang="sv">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>VGR Öppna Data - Sökbar Tabell</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 1rem;
      background: #f7f9fc;
      color: #333;
    }
    h1 {
      text-align: center;
      margin-bottom: 1rem;
    }
    form {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      margin-bottom: 1rem;
      justify-content: center;
    }
    label {
      display: flex;
      flex-direction: column;
      font-weight: 600;
      font-size: 0.9rem;
      color: #555;
      min-width: 140px;
    }
    input[type="search"] {
      padding: 0.4rem 0.6rem;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      margin-top: 0.2rem;
      width: 160px;
      box-sizing: border-box;
      transition: border-color 0.2s;
    }
    input[type="search"]:focus {
      outline: none;
      border-color: #0078d4;
      box-shadow: 0 0 5px rgba(0, 120, 212, 0.5);
    }
    button {
      padding: 0.6rem 1.2rem;
      font-size: 1rem;
      background-color: #0078d4;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      align-self: flex-end;
      height: 38px;
      transition: background-color 0.3s;
    }
    button:hover {
      background-color: #005a9e;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    th, td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid #eee;
      text-align: left;
      font-size: 0.95rem;
    }
    th {
      background-color: #0078d4;
      color: white;
      cursor: pointer;
      user-select: none;
    }
    tr:hover {
      background-color: #f1f9ff;
    }
    @media (max-width: 700px) {
      form {
        flex-direction: column;
        align-items: stretch;
      }
      label {
        min-width: auto;
        width: 100%;
      }
      input[type="search"] {
        width: 100%;
      }
      button {
        width: 100%;
      }
      table, thead, tbody, th, td, tr {
        display: block;
      }
      thead tr {
        display: none;
      }
      tr {
        margin-bottom: 1rem;
        border: 1px solid #ccc;
        border-radius: 6px;
        padding: 0.5rem;
        background: white;
      }
      td {
        padding: 0.4rem 0.6rem;
        border: none;
        position: relative;
        padding-left: 50%;
        text-align: right;
      }
      td::before {
        position: absolute;
        top: 50%;
        left: 1rem;
        transform: translateY(-50%);
        white-space: nowrap;
        font-weight: 600;
        color: #555;
        content: attr(data-label);
        text-align: left;
      }
    }
  </style>
</head>
<body>

  <h1>VGR Öppna Data</h1>

  <form id="searchForm" aria-label="Sök i datasetet">
    <label>
      Konsttyp
      <input type="search" id="artformInput" placeholder="Sök Konsttyp" autocomplete="off" />
    </label>
    <label>
      Konstnär
      <input type="search" id="creatorInput" placeholder="Sök Konstnär" autocomplete="off" />
    </label>
    <label>
      Framställningsår
      <input type="search" id="createdInput" placeholder="Sök Framställningsår" autocomplete="off" />
    </label>
    <label>
      VG-nummer
      <input type="search" id="idInput" placeholder="Sök VG-nummer" autocomplete="off" />
    </label>
    <label>
      Titel
      <input type="search" id="titleInput" placeholder="Sök Titel" autocomplete="off" />
    </label>
    <label>
      Teknik
      <input type="search" id="artmediumInput" placeholder="Sök Teknik" autocomplete="off" />
    </label>
    <label>
      Äldre id
      <input type="search" id="olderIdInput" placeholder="Sök Äldre id" autocomplete="off" />
    </label>
    <button type="submit">Sök</button>
  </form>

  <table id="dataTable" aria-describedby="tableDescription" role="grid" aria-live="polite" aria-relevant="all">
    <thead id="tableHead"></thead>
    <tbody id="tableBody"></tbody>
  </table>
  <p id="tableDescription" class="visually-hidden">Tabell med data från VGR Öppna Data</p>

  <script>
    const datasetBaseURL = 'https://vgregion.entryscape.net/rowstore/dataset/1802e57a-b25d-4716-8437-9ed648bbae59';

    // Mappning API-fält -> Svenska rubriker
    const columnsMap = {
      "artform": "Konsttyp",
      "creator": "Konstnär",
      "created": "Framställningsår",
      "id": "VG-nummer",
      "title": "Titel",
      "artmedium": "Teknik",
      "older id": "Äldre id"
    };

    let allData = [];
    let currentSortColumn = null;
    let currentSortAsc = true;

    // Bygger querystring med rätt encode och mellanslag som %20
    function buildQuery(params) {
      const parts = [];
      for (const key in params) {
        if (params[key]) {
          // Ersätt mellanslag i nycklar med ' ' (Entryscape kräver space, inte _ eller %20)
          const encodedKey = encodeURIComponent(key).replace(/%20/g, ' ');
          const val = key === 'id' ? params[key].toUpperCase() : params[key];
          const encodedVal = encodeURIComponent(val);
          parts.push(`${encodedKey}=${encodedVal}`);
        }
      }
      return parts.length ? '?' + parts.join('&') + '&_limit=100&_offset=0' : '?_limit=100&_offset=0';
    }

    async function fetchData(params = {}) {
      const url = datasetBaseURL + buildQuery(params);
      try {
        const res = await fetch(url, { headers: { accept: 'application/json' } });
        if (!res.ok) throw new Error(`HTTP-fel: ${res.status}`);
        const json = await res.json();
        allData = json.results || [];
        renderTable(allData);
      } catch (err) {
        alert('Hämtfel: ' + err.message);
      }
    }

    function renderTable(data) {
      const tableHead = document.getElementById('tableHead');
      const tableBody = document.getElementById('tableBody');
      tableHead.innerHTML = '';
      tableBody.innerHTML = '';

      if (data.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="100%">Inga resultat.</td></tr>';
        return;
      }

      // Visa endast de kolumner vi vill, med svenska rubriker
      const headers = Object.keys(columnsMap);

      // Skapa header-rad
      const trHead = document.createElement('tr');
      headers.forEach(col => {
        const th = document.createElement('th');
        th.textContent = columnsMap[col];
        th.tabIndex = 0;
        th.onclick = () => sortTableByColumn(col);
        trHead.appendChild(th);
      });
      tableHead.appendChild(trHead);

      // Skapa rader
      data.forEach(row => {
        const tr = document.createElement('tr');
        headers.forEach(col => {
          const td = document.createElement('td');
          let val = row[col] ?? '';
          if (col === 'id' && typeof val === 'string') val = val.toUpperCase();
          td.textContent = val;
          td.setAttribute('data-label', columnsMap[col]);
          tr.appendChild(td);
        });
        tableBody.appendChild(tr);
      });
    }

    function sortTableByColumn(col) {
      if (currentSortColumn === col) {
        currentSortAsc = !currentSortAsc;
      } else {
        currentSortColumn = col;
        currentSortAsc = true;
      }

      const sorted = [...allData].sort((a, b) => {
        const valA = (a[col] ?? '').toString().toLowerCase();
        const valB = (b[col] ?? '').toString().toLowerCase();
        if (valA < valB) return currentSortAsc ? -1 : 1;
        if (valA > valB) return currentSortAsc ? 1 : -1;
        return 0;
      });

      renderTable(sorted);
    }

    // Hantera submit i formuläret
    document.getElementById('searchForm').addEventListener('submit', e => {
      e.preventDefault();

      // Läs in alla sökfält
      const params = {};
      for (const key in columnsMap) {
        const input = document.getElementById(key.replace(' ', '') + 'Input'); // t.ex. "older id" => "olderidInput"
        if (input) {
          const val = input.value.trim();
          if (val) params[key] = val;
        }
      }

      fetchData(params);
    });

    // Ladda initialt utan filter
    fetchData();
  </script>

</body>
</html>
